set nocompatible
set incsearch
syntax on
colorscheme desert

function! ColorsInsertMode()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=10
	hi! CursorLineNr ctermbg=22 ctermfg=white cterm=none
endfunction
function! ColorsOtherModes()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=167
	hi! CursorLineNr ctermbg=13 ctermfg=white cterm=none
endfunction
autocmd InsertEnter * call ColorsInsertMode()
autocmd InsertLeave * call ColorsOtherModes()

function! FixColorscheme() "{{{
	hi! Normal ctermbg=none guibg=black
	hi! Search ctermfg=22 ctermbg=157 gui=reverse
	hi! Folded cterm=bold ctermbg=235 ctermfg=167
	hi! DiffDelete ctermfg=1 ctermbg=1
	hi! DiffAdd cterm=bold ctermfg=193 ctermbg=23
	hi! DiffChange ctermfg=none ctermbg=234
	hi! DiffText cterm=bold ctermfg=225 ctermbg=236
	hi! CursorLine cterm=none ctermbg=none
	hi! CursorLineNr cterm=none ctermbg=13 ctermfg=white
	call ColorsOtherModes()
	hi! Comment cterm=italic ctermfg=8
	hi! ModeMsg ctermfg=Black ctermbg=Green
	hi! VertSplit ctermfg=179
	hi! EndOfBuffer ctermbg=235
	hi! TabLine ctermbg=5 ctermfg=3 cterm=bold
	hi! TabLineSel ctermbg=3 ctermfg=5 cterm=bold
	hi! TabLineFill ctermbg=none
	hi! String ctermfg=2 ctermbg=235
	hi! cFormat ctermfg=36 ctermbg=237
	hi! SpecialChar ctermfg=142 ctermbg=236
	hi! PreProc ctermfg=15 cterm=bold
	hi! cDefine ctermfg=15 cterm=none
	hi! Type ctermfg=24 gui=none
	hi! StorageClass ctermfg=63
	hi! Operator ctermfg=6
	hi! Number ctermfg=gray
	hi! Boolean ctermfg=gray
	hi! Repeat ctermfg=202 cterm=bold gui=none
	hi! Statement ctermfg=202 cterm=bold gui=none
	hi! Conditional ctermfg=202 cterm=bold gui=none
	hi! Constant ctermfg=121
	hi! javaScopeDecl ctermfg=135
	hi! StatusLine ctermbg=235 ctermfg=3 cterm=bold
	hi! StatusLineNC ctermbg=235 ctermfg=166
	hi! SpecialKey ctermfg=235 cterm=italic
	hi! ExtraWhitespace ctermbg=17
	hi! MatchParen ctermbg=magenta ctermfg=yellow
	hi! Visual ctermbg=none ctermfg=none cterm=reverse,italic
	hi! luaFunc ctermbg=none ctermfg=white cterm=bold gui=none
	hi! luaFunction ctermbg=none ctermfg=24
endfunction
"}}}

augroup MyColors
	au!
	au ColorScheme * call FixColorscheme()
augroup END

call FixColorscheme()

" Show trailing whitespace:
match ExtraWhitespace /\s\+$/

" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/

" Show tabs that are not at the start of a line:
match ExtraWhitespace /[^\t]\zs\t\+/

au BufRead * call matchadd("EndOfBuffer", "^[[:space:]]*$")

iabbrev heigth height

function! LuaAbbreviations()
	iabbrev <buffer> fn] function()end<Left><Left><Left><Left>
	iabbrev <buffer> ew] io.stderr:write("\n")<Left><Left><Left><Left><Left>
	iabbrev <buffer> pr] print()<Left>
	set foldmarker=--[[,]]
endfunction

autocmd FileType lua call LuaAbbreviations()

function! CAbbreviations()
	iabbrev <buffer> i] #include
	iabbrev <buffer> I] #include
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	set foldmarker=/*,*/
endfunction

autocmd FileType c call CAbbreviations()

function! JavaAbbreviations()
	iabbrev <buffer> psvm] public static void main(String[] args)
	iabbrev <buffer> im] import java.
	iabbrev <buffer> iu] import java.util.*;
	iabbrev <buffer> ii] import java.io.*;
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	iabbrev <buffer> pc] public class 
	iabbrev <buffer> pfc] public final class 
	iabbrev <buffer> prf] private final 
	iabbrev <buffer> psfi] public static final int
	iabbrev <buffer> psfs] public static final String 
	iabbrev <buffer> psf] public static final 
	iabbrev <buffer> ov] @Override
	iabbrev <buffer> eq] @Override<CR>public boolean equals(Object o) {<CR>return (o instanceof
	iabbrev <buffer> ha] @Override<CR>public int hashCode() {<CR>
	set foldmarker=/**,*/
endfunction

autocmd FileType java call JavaAbbreviations()

set laststatus=2
set fillchars+=vert:\ 
set suffixesadd=.rst,.java
set list
set listchars=tab:â–¸\ 
set tabstop=3
set noexpandtab
set autoindent
set shiftwidth=3
set scrolloff=3

set guioptions-=m
set guioptions-=T
set guifont=Droid\ Sans\ Mono:h11,Cascadia\ Code:h11,Consolas:h13,Droid\ Sans\ Mono
set renderoptions=type:directx,level:0.75,gamma:1.25,contrast:0.25,geom:1,renmode:5,taamode:1
set linespace=-1

set foldmethod=marker
set mouse=a
set belloff=all
set switchbuf=newtab

set background=dark
set hlsearch
set ttyfast

set number
set relativenumber

set undofile
set updatetime=60000

set cul

command Hidecomments hi! Comment ctermfg=236
command Showcomments hi! Comment ctermfg=8
command Mydiff execute 'w !diff -u % - | (command -v delta && delta --paging never || cat)'

set whichwrap+=<,>,[,]
set timeout timeoutlen=1000 ttimeoutlen=100

let g:termdebug_wide=1

let g:undotree_WindowLayout = 3
let g:undotree_DiffCommand = "diff -u"
let g:undotree_HighlightSyntaxAdd = "DiffAdd"
let g:undotree_HighlightSyntaxChange = "DiffChange"
let g:undotree_HighlightSyntaxDel = "DiffDelete"

let g:syntastic_mode_map = {'mode': 'passive'}

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
let g:slime_bracketed_paste = 1

let g:TerminusCursorShape = 0

let g:netrw_altv=1

let g:NERDTreeShowLineNumbers=1
let g:NERDTreeWinPos="right"

let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'lightred', 'lightmagenta']

set virtualedit+=onemore
set tabpagemax=50

let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat

function! SaveAndMake()
	:w
	:silent make
endfunction

let mapleader = "\<C-k>"

nnoremap <C-@> <Esc>
inoremap <C-@> <Esc>
nnoremap <Space> i

inoremap <C-A> <ESC>o<TAB>
noremap <C-F> <ESC>
noremap! <C-F> <ESC>
inoremap <C-F> <ESC>l

noremap! <ESC>[1;5D <C-Left>
noremap! <ESC>[1;5C <C-Right>
inoremap <ESC>[1;5A <C-O>{
inoremap <ESC>[1;5B <C-O>}
noremap <ESC>[1;5D b
noremap <ESC>[1;5C w
noremap <ESC>[1;5A {
noremap <ESC>[1;5B }

nnoremap <ESC>[1;3D :bprev<cr>
nnoremap <ESC>[1;3C :bnext<cr>
nnoremap <ESC>[1;3A <c-w>W
nnoremap <ESC>[1;3B <c-w>w

noremap! <ESC>[1;3D <c-o>:bprev<cr>
noremap! <ESC>[1;3C <c-o>:bnext<cr>
noremap! <ESC>[1;3A <c-o><c-w>W
noremap! <ESC>[1;3B <c-o><c-w>w

noremap <leader><leader> :
inoremap <leader><leader> <C-O>:
noremap <leader>1 :!
inoremap <leader>1 <C-O>:!
noremap <leader>N :NERDTreeToggle<cr>
inoremap <leader>N <C-O>:NERDTreeToggle<cr>
noremap <leader>S :mksession!<cr>
inoremap <leader>S <C-O>:mksession!<cr>

inoremap <leader>m <C-O>:call SaveAndMake()<cr>
nnoremap <leader>m :call SaveAndMake()<cr>
noremap! <C-S> <ESC>:w<cr>
noremap! <C-Q> <ESC>l
nnoremap <C-S> :w<cr>
nnoremap <C-Q> :bdelete<cr>

nnoremap ; :
nnoremap , ;

vnoremap <C-E> :!
nnoremap <C-E> :%!
inoremap <C-E> <C-O>:%!

nnoremap <leader>d daW
nnoremap <leader><C-]> <C-w><C-]><C-w>T
inoremap <leader><C-]> <C-O><C-w><C-]><C-O><C-w>T
nnoremap <leader>T :tnext<CR>
inoremap <leader>T <C-O>:tnext<CR>

nnoremap <leader>l :Buffers<CR>
nnoremap <leader>w :Windows<CR>
nnoremap <leader>f :Files<CR>
nnoremap <leader>c :Commands<CR>
nnoremap <leader>q :q<CR>

inoremap <leader>l <C-O>:Buffers<CR>
inoremap <leader>w <C-O>:Windows<CR>
inoremap <leader>f <C-O>:Files<CR>
inoremap <leader>c <C-O>:Commands<CR>
inoremap <leader>q <C-O>:q<CR>

vnoremap <leader>l <C-O>:Buffers<CR>
vnoremap <leader>w <C-O>:Windows<CR>
vnoremap <leader>f <C-O>:Files<CR>
vnoremap <leader>c <C-O>:Commands<CR>
vnoremap <leader>q <C-O>:q<CR>

nnoremap <leader>s :SlimeSend<CR>
inoremap <leader>s <C-O>:SlimeSend<CR>
vnoremap <leader>s :SlimeSend<CR>

au FocusLost * silent! wa

au FocusLost   * set norelativenumber
au FocusGained * set relativenumber

set hidden

" see :help xterm-bracketed-paste
if &t_BE == ''
	let &t_BE = "\e[?2004h"
	let &t_BD = "\e[?2004l"
	let &t_PS = "\e[200~"
	let &t_PE = "\e[201~"
endif

packadd termdebug

" copied from Arch Linux vim config
if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
let &viminfofile=&g:directory . '/viminfo'
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
