" Minimal base {{{
set nocompatible nomodeline
set incsearch hlsearch nowrapscan ignorecase
set number relativenumber
set showcmd

syntax on
colorscheme desert

set laststatus=2 cursorline cursorlineopt=number
set suffixesadd=.rst,.java
set list listchars=tab:›\ ,trail:·
set fillchars+=vert:\ 
set tabstop=3 noexpandtab shiftwidth=3 autoindent
set splitbelow splitright
set virtualedit+=onemore,block backspace=indent,eol,start scrolloff=0
silent! set backspace+=nostop
set tabpagemax=50 switchbuf=

" set guioptions-=m
set guioptions-=L
set guioptions-=T
set guioptions-=a
set guioptions-=P
set clipboard=
set guifont=Droid\ Sans\ Mono:h9,Cascadia\ Code:h11,Consolas:h11,Droid\ Sans\ Mono
set winaltkeys=no
function! GuiTabLabel()
	if exists('t:Name')
		return t:Name
	else
		return '%f'
	endif
endfunction
let &guitablabel = '%{%GuiTabLabel()%}'
set renderoptions=type:directx,level:0.75,gamma:1.25,contrast:0.25,geom:1,renmode:5,taamode:1
set linespace=0
if has('win32')
	set termguicolors
endif

set foldmethod=manual foldminlines=1
set foldopen=insert,mark,quickfix,tag,undo

set visualbell t_vb= belloff=all ttyfast mouse=a background=dark timeout timeoutlen=10000 ttimeoutlen=20
if &g:ttymouse != 'win32'
	set ttymouse=sgr
endif
" ttymouse=sgr fixes issue where mouse position overflows past x=220, alternatively xterm2 can be used
set whichwrap+=<,>,[,]

set hidden undofile updatetime=1000 nofsync swapsync= history=10000
let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat

set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m
set tags=tags;\
let g:is_posix = 1
let g:is_bash = 1

" }}}

" Key mappings {{{
inoremap <silent> <Esc> <C-O>:stopinsert<CR>

vnoremap az <Esc>:silent! normal! [z<cr>V]z
omap az Vaz

vnoremap a. <Esc>:call search('\(.)\\|,[[:space:]]*\zs[[:space:]]\\|,\)')<cr>v`<o
vmap a, <Esc>:call search('[(,][[:space:]]*\zs', 'b')<cr>va.
omap a, Va,

nnoremap <F9> :tabp<CR>
inoremap <F9> <C-o>:tabp<CR>
vnoremap <F9> <C-o>:tabp<CR>
tnoremap <F9> <C-w>:tabp<CR>
nnoremap <F10> :tabn<CR>
inoremap <F10> <C-o>:tabn<CR>
vnoremap <F10> <C-o>:tabn<CR>
tnoremap <F10> <C-w>:tabn<CR>
nnoremap <C-@> <Esc>
inoremap <C-@> <Esc>

noremap <C-F> <ESC>
noremap! <C-F> <ESC>
inoremap <C-F> <ESC>l
inoremap <C-L> <ESC>l

tmap <C-w>; <C-w>:

if has("gui_running")
	silent! vunmap <C-V>
	silent! nunmap <C-V>
	silent! vunmap <C-X>
	silent! nunmap <C-X>
	map <M-l> <C-L>
	inoremap <M-l> <ESC>l
	map <M-w> <C-w>
	inoremap <M-w> <C-w>
	imap <C-Backspace> <C-w>
	imap <M-Backspace> <C-w>
	tmap <M-f> <Esc>f
	tmap <M-b> <Esc>b
	tmap <M-.> <Esc>.
	tmap <M-Backspace> <Esc><Backspace>
	vmap <C-S-c> "+y
	nmap <C-S-v> "+P
	imap <C-S-v> <C-r>+
	tmap <C-S-v> <C-w>"+
	vmap <M-c> y
	nmap <M-v> "0P
	imap <M-v> <C-r>0
	tmap <M-v> <C-w>"0
	imap <M-k> <C-k>
	map <M-k> <C-k>
	tmap <M-k> <C-k>
	map <C-1> 1gt
	map <C-2> 2gt
	map <C-3> 3gt
	map <C-4> 4gt
	map <C-5> 5gt
	map <C-6> 6gt
	map <C-7> 7gt
	map <C-8> 8gt
	map <C-9> 9gt

	imap <C-1> <ESC>1gt
	imap <C-2> <ESC>2gt
	imap <C-3> <ESC>3gt
	imap <C-4> <ESC>4gt
	imap <C-5> <ESC>5gt
	imap <C-6> <ESC>6gt
	imap <C-7> <ESC>7gt
	imap <C-8> <ESC>8gt
	imap <C-9> <ESC>9gt

	tmap <C-1> <C-w>1gt
	tmap <C-2> <C-w>2gt
	tmap <C-3> <C-w>3gt
	tmap <C-4> <C-w>4gt
	tmap <C-5> <C-w>5gt
	tmap <C-6> <C-w>6gt
	tmap <C-7> <C-w>7gt
	tmap <C-8> <C-w>8gt
	tmap <C-9> <C-w>9gt
endif

tnoremap <C-PageUp> <C-w>N

noremap <S-F1> :1wincmd w<CR>
noremap <S-F2> :2wincmd w<CR>
noremap <S-F3> :3wincmd w<CR>
noremap <S-F4> :4wincmd w<CR>
noremap <S-F5> :5wincmd w<CR>
noremap <S-F6> :6wincmd w<CR>

inoremap <S-F1> <C-o>:1wincmd w<CR>
inoremap <S-F2> <C-o>:2wincmd w<CR>
inoremap <S-F3> <C-o>:3wincmd w<CR>
inoremap <S-F4> <C-o>:4wincmd w<CR>
inoremap <S-F5> <C-o>:5wincmd w<CR>
inoremap <S-F6> <C-o>:6wincmd w<CR>

noremap! <C-S> <ESC>:w<cr>
noremap! <C-Q> <ESC>l
nnoremap <C-S> :w<cr>
nnoremap <C-Q> :q<cr>

nnoremap ; :
nnoremap , ;
nnoremap gw <C-W>w

noremap ) t)
noremap ( T(

vnoremap <C-E> :!
nnoremap <C-E> :%!
inoremap <C-E> <C-O>:%!

noremap <C-P> <C-w>}

inoremap <C-A> <C-O>S
function! MyCtrlL()
	let l:topline=winsaveview().topline
	normal zz
	redraw!
	if l:topline == winsaveview().topline
		call feedkeys(":noh\<cr>")
	endif
endfunction
nnoremap <C-@> <Esc>
inoremap <C-@> <Esc>
inoremap <C-l> <Esc>l
vnoremap <C-l> <Esc>l
nnoremap <C-l> :call MyCtrlL()<cr>

nnoremap <C-g> gt
inoremap <C-g> <C-o>gt
vnoremap <C-g> <C-o>gt
tnoremap <C-g> <C-w>gt

map <Insert> <C-w>w
tmap <Insert> <C-w>w
map <F11> <C-w>W
tmap <F11> <C-w>W
map <F12> <C-w>w
tmap <F12> <C-w>w

tmap <C-w>; <C-w>:
tmap <ScrollWheelUp> <C-w>N

" }}}

" Leader mappings (Vanilla) {{{
let mapleader = "\<C-k>"
nmap \ <leader>
vmap \ <leader>

vnoremap <leader>g! "py:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>g! :LogiPat !"<C-R>p"<cr>:noh<cr>
vnoremap <leader>z! "pyzf:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>z! zf:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>zN :set fdm=expr<cr>:set foldexpr=getline(v:lnum)!~@z<cr>:set fdm=manual<cr>
nnoremap <leader>zM :set fdm=expr<cr>:set foldexpr=getline(v:lnum)=~@z<cr>:set fdm=manual<cr>
vmap <leader>zn "zy<C-k>zN
vmap <leader>zm "zy<C-k>zM
nmap <leader>zn "zyiw<C-k>zN
nmap <leader>zm "zyiw<C-k>zM

nnoremap <leader>zs :set fdm=syntax<cr>:set fdm=manual<cr>
"nnoremap <leader>zm :set foldmethod=manual<cr>

noremap <leader>; :<Up><cr>
noremap <leader>. :lnext<cr>
noremap <leader>, :lprev<cr>
noremap <leader>> :cnext<cr>
noremap <leader>< :cprev<cr>
noremap <leader>gd :vert sp\|exe "norm gd"\|l\|q<cr>
noremap <leader>gD :vert sp\|exe "norm gD"\|l\|q<cr>
noremap <leader>gk :vert sp\|call search('^[[:alnum:]]','b')\|exe "norm {j"\|l\|q<cr>
noremap <leader>gj :vert sp\|call search('^[[:alnum:]]'    )\|exe "norm }k"\|l\|q<cr>
noremap <leader>K :call search('^[[:alnum:]]','b')\|exe "norm {j"<cr>
noremap <leader>J :call search('^[[:alnum:]]'    )\|exe "norm }k"<cr>
noremap g. :call search(g:MyMergeConflictMarkerRegex)<cr>
noremap g, :call search(g:MyMergeConflictMarkerRegex, 'b')<cr>
vnoremap g. :call search(g:MyMergeConflictMarkerRegex)<cr>
vnoremap g, :call search(g:MyMergeConflictMarkerRegex, 'b')<cr>
let g:MyMergeConflictMarkerRegex='^\(>>>>>>>\|<<<<<<<\||||||||\|=======\)'


inoremap <leader>; <C-O>:
noremap <leader>1 :!
inoremap <leader>1 <C-O>:!
map <leader>bn :let @n=bufnr('%')<cr>:echo bufnr('%')<cr>

tnoremap <leader>; <C-W>:
tnoremap <leader>1 <C-W>:!

nnoremap <leader>w viw
nnoremap <leader>] <C-w><C-]><C-w>T
inoremap <leader>] <C-O><C-w><C-]><C-O><C-w>T
nnoremap <leader>[ <C-W>v<C-]>
inoremap <leader>[ <C-O><C-W>v<C-O><C-]>
nnoremap <leader>tn :tnext<CR>
inoremap <leader>tn <C-O>:tnext<CR>

noremap <leader>se :mksession!<cr>
inoremap <leader>se <C-O>:mksession!<cr>
nnoremap <leader>Y _"+yt#
vnoremap <leader>Y "+y
noremap + "+y
nnoremap <leader>zs :set foldmethod=syntax<cr>:set foldmethod=manual<cr>
nmap <leader>gr viw<C-k>gr
vnoremap <leader>gr "gy:let @/=@g<cr>:silent grep! -F '<C-R>g'<cr>:redraw!<cr>:cw<cr>
nmap <leader>gl viw<C-k>gl
vnoremap <leader>gl "gy:let @/=@g<cr>:silent lgrep! -F '<C-R>g'<cr>:redraw!<cr>:lw<cr>
nnoremap <leader>g= "gyiw:silent lgrep '\.[[:space:]]*<C-r>g[[:space:]]*=[[:space:]]*'<cr>:redraw!<cr>:lfirst<cr>
nmap <leader>gf :Fig <C-R><C-F><cr>
nmap <leader>gF <C-w>v:Fig <C-R><C-F><cr>
noremap <leader>t% :call system('tmux loadb -', @%)<cr>
noremap <leader>t. :call system('tmux loadb -', line('.'))<cr>
noremap <leader>t: :call system('tmux loadb -', @%.':'.line('.'))<cr>
vnoremap <leader>ty "ty:call system('tmux loadb -', getreg("@t"))<cr>
nnoremap <leader>ty "tyiw:call system('tmux loadb -', getreg("@t"))<cr>
nnoremap <leader>tp :let @t=system('tmux showb')<cr>"tP
vnoremap <leader>vy ygv<ESC>
nnoremap <leader>\| /<C-R>/\\|
vnoremap <leader>\| "sy:let @/=@/.'\\|<C-R>s'<cr>
nmap <leader>'a 'azv<C-k><space>''
nmap <leader>'b 'bzv<C-k><space>''
nmap <leader>'c 'czv<C-k><space>''
nmap <leader>'d 'dzv<C-k><space>''
nmap <leader>'e 'ezv<C-k><space>''
nmap <leader>$ 0va[<Esc>wv$<C-k><space>
vnoremap <leader>} "cy<C-w><C-l><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 3, 'sent_right')<cr>
nnoremap <leader>} "cyy<C-w><C-l><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 3, 'sent_right')<cr>
vnoremap <leader>{ "cy<C-w><C-h><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 2, 'sent_left')<cr>
nnoremap <leader>{ "cyy<C-w><C-h><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 2, 'sent_left')<cr>
vnoremap <leader>_ "cy<C-w><C-j><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 4, 'sent_down')<cr>
nnoremap <leader>_ "cyy<C-w><C-j><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 4, 'sent_down')<cr>
nnoremap <leader>) "cyip<C-w><C-l><C-w>"c<C-w><C-p>
nnoremap <leader>( "cyip<C-w><C-h><C-w>"c<C-w><C-p>
tnoremap <leader>sl <C-W>:SlowSend<CR>
vnoremap <leader>* "cy:let orig_window=winnr()<cr>:windo call search(@c,'sw')<cr>:windo call MyHighlight(9, @c)<cr>:exe orig_window."wincmd w"<cr>
nnoremap <leader>/ :call search(input("/"))<cr>
vnoremap <leader>/ <C-o>:call search(input("/"))<cr>
nnoremap <leader>? :call search(input("?"),"b")<cr>
vnoremap <leader>/ <C-o>:call search(input("?"),"b")<cr>
nnoremap <leader><PageDown> <PageDown>n
nnoremap <leader><PageUp> <PageUp>N
sign define sent       text=●+ texthl=Hi21
sign define sent_left  text=●< texthl=Hi22
sign define sent_right text=●> texthl=Hi23
sign define sent_down  text=●_ texthl=Hi24
sign define sourced    text=●: texthl=Hi25
vnoremap <leader><space> "cy<C-w><C-w><C-w>"c<C-w><C-p>:silent call MyDecorateLine(line('.'), 1, 'sent')<cr>
nmap <leader><space> V<C-k><space>

nmap <leader>* vi[<C-k>*
nnoremap <leader>ip4 /[0-9]\{1,3}\.[0-9]\{1,3}\.[0-9]\{1,3}\.[0-9]\{1,3}<cr>
nnoremap <leader>mac /[0-9a-fA-F]\{2}:[0-9a-fA-F]\{2}:[0-9a-fA-F]\{2}:[0-9a-fA-F]\{2}:[0-9a-fA-F]\{2}:[0-9a-fA-F]\{2}<cr>
tnoremap <leader>19 192.168.

nnoremap <leader>fh [[<left>0f(Be
nnoremap <leader>fH [[<left>0f(Beviw
nnoremap <leader>zc :let &foldcolumn = 1+max(map(range(1,line('$')), 'foldlevel(v:val)'))<cr>
nnoremap <leader>zo zo]zzz
nnoremap <leader>z/ :set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)!~@/<cr>:set fdm=manual<cr>
nnoremap <leader>zn/ :set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)=~@/<cr>:set fdm=manual<cr>
vnoremap <leader>zz "zy:set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)!~@z<cr>:set fdm=manual<cr>
vnoremap <leader>znz "zy:set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)=~@z<cr>:set fdm=manual<cr>
nnoremap <leader>zZ :set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)!~@z<cr>:set fdm=manual<cr>
nnoremap <leader>znZ :set fdm=expr<cr>:set foldminlines=1<cr>:set foldexpr=getline(v:lnum)=~@z<cr>:set fdm=manual<cr>
nnoremap <leader>tt :tab sp<cr>
nnoremap <leader>md :echo system('printf %s "$(md5sum "'.@%.'")"')<cr>
nnoremap <leader>cp :!cp -- % ~/copy<cr>:redraw!<cr>
nnoremap <leader>so :w<cr>:so %<cr>
nnoremap <leader>gc "cyiw:enew<cr>:set ft=diff<cr>:r!git log -p -n 1 <C-r>c<cr>:keepj 1<cr>:set buftype=nofile<cr>
nmap <leader>gC :tab sp<cr><C-k>gc
nnoremap <leader>d1 :tabnew<cr>:wincmd v<cr>:enew<cr>:windo difft<cr>:windo set buftype=nofile<cr>
vnoremap <leader>d1 m`y``:tabnew<cr>:norm "0p<cr>:wincmd v<cr>:enew<cr>:windo difft<cr>:windo set buftype=nofile<cr>
nnoremap <leader>sH :SignifyHunkDiff<cr>
nnoremap <leader>sD :SignifyDiff<cr>
nnoremap <leader>sU :SignifyHunkUndo<cr>
nnoremap <leader>sF :SignifyFold<cr>
nnoremap <leader>tH :term<cr>
nnoremap <leader>tW :vert term<cr>
nnoremap <leader>tT :tab term<cr>
nnoremap <leader>tC :term ++curwin<cr>
nnoremap <leader>tD :let $VIM_TERM_CD=expand('%:p:h')<cr>:vert terminal<cr>cd "$VIM_TERM_CD"<cr>
vnoremap <leader>ex "ey:@e<cr>:silent call MyDecorateLine(line('.'), 5, 'sourced')<cr>
noremap <leader>rn :set nu rnu<cr>
noremap <leader>nrn :set nu nornu<cr>
noremap <leader>nn :set nonu nornu<cr>
vnoremap <leader>su <esc>`>a)<esc>`<i(<esc>i
noremap <leader>no :Notes<cr>
noremap <leader>er :e %:r<cr>
noremap <leader>eh :e %:r.h<cr>
noremap <leader>ec :e %:r.c<cr>

inoremap <leader>mk <C-O>:call SaveAndMake()<cr>
nnoremap <leader>mk :call SaveAndMake()<cr>

function! SaveAndMake()
	if !exists('w:MakeWindow') && &ft != 'qf'
		tab sp
	endif
	let w:MakeWindow=1
	wa
	silent make
	cw
endfunction

function! FastSend(data)
	for item in split(a:data, '\zs')
		call term_sendkeys(bufnr('%'), item)
		sleep 1m
		redraw
	endfor
endfunction
function! SlowSend(data)
	for item in split(a:data, '\zs')
		call term_sendkeys(bufnr('%'), item)
		sleep 10m
		redraw
	endfor
endfunction
command! SlowSend call SlowSend(@")

function! MyQuickfixDelete()
	let l:list = getqflist(0)
	let l:line = line('.')
	let l:column = col('.')
	call remove(l:list, line - 1)
	call setqflist(0, l:list)
	call cursor(line, column)
endfunction!

function! MyLocDelete()
	let l:list = getloclist(0)
	let l:line = line('.')
	let l:column = col('.')
	call remove(l:list, line - 1)
	call setloclist(0, l:list)
	call cursor(line, column)
endfunction!

function! MyEscapeRegex(str)
	return escape(a:str, '^$.*?/\[]~')
endfunction

function! MyHighlight(num, pattern)
	silent! call matchdelete(100 + a:num)
	call matchadd("Hi".a:num, a:pattern, 20, 100 + a:num)
endfunction

function! MyLineHighlight(num, lineno, priority)
	silent! call matchdelete(100 + a:num)
	call matchadd("Hi".a:num, '^\%'.a:lineno.'l.*$', a:priority, 100 + a:num)
endfunction

function! MyDecorateLine(lineno, signid, signname)
	exe 'sign unplace '.a:signid.' group=my'
	call sign_place(a:signid, 'my', a:signname, bufnr('%'), {'lnum':a:lineno, 'priority':-20})
endfunction

function! MyStringHighlight(num, string)
	call MyHighlight(a:num, MyEscapeRegex(a:string))
endfunction

function! MyWordHighlight(num, string)
	call MyHighlight(a:num, '\<'.MyEscapeRegex(a:string).'\>')
endfunction

function! HiSystemd()
	let @z='\<systemd\[[0-9]*]'
	call MyHighlight(2, '\<Start\(ed\|ing\)\>')
	call MyHighlight(4, @z)
	call MyHighlight(3, '@fromans')
	call MyHighlight(1, '\<Stopp\(ed\|ing\)\>')
	normal \zZ
endfunction

vnoremap <leader>h0 "hy:call MyWordHighlight(0, @h)<cr>
vnoremap <leader>h1 "hy:call MyWordHighlight(1, @h)<cr>
vnoremap <leader>h2 "hy:call MyWordHighlight(2, @h)<cr>
vnoremap <leader>h3 "hy:call MyWordHighlight(3, @h)<cr>
vnoremap <leader>h4 "hy:call MyWordHighlight(4, @h)<cr>
vnoremap <leader>h5 "hy:call MyWordHighlight(5, @h)<cr>
vnoremap <leader>h6 "hy:call MyWordHighlight(6, @h)<cr>
vnoremap <leader>h7 "hy:call MyWordHighlight(7, @h)<cr>
vnoremap <leader>h8 "hy:call MyWordHighlight(8, @h)<cr>
vnoremap <leader>h9 "hy:call MyWordHighlight(9, @h)<cr>
vnoremap <leader>hB0 "hy:call MyWordHighlight(10, @h)<cr>
vnoremap <leader>hB1 "hy:call MyWordHighlight(11, @h)<cr>
vnoremap <leader>hB2 "hy:call MyWordHighlight(12, @h)<cr>
vnoremap <leader>hB3 "hy:call MyWordHighlight(13, @h)<cr>
vnoremap <leader>hB4 "hy:call MyWordHighlight(14, @h)<cr>
vnoremap <leader>hB5 "hy:call MyWordHighlight(15, @h)<cr>
vnoremap <leader>hB6 "hy:call MyWordHighlight(16, @h)<cr>
vnoremap <leader>hB7 "hy:call MyWordHighlight(17, @h)<cr>
vnoremap <leader>hB8 "hy:call MyWordHighlight(18, @h)<cr>
vnoremap <leader>hB9 "hy:call MyWordHighlight(19, @h)<cr>

vnoremap <leader>hA0 "hy:call MyStringHighlight(0, @h)<cr>
vnoremap <leader>hA1 "hy:call MyStringHighlight(1, @h)<cr>
vnoremap <leader>hA2 "hy:call MyStringHighlight(2, @h)<cr>
vnoremap <leader>hA3 "hy:call MyStringHighlight(3, @h)<cr>
vnoremap <leader>hA4 "hy:call MyStringHighlight(4, @h)<cr>
vnoremap <leader>hA5 "hy:call MyStringHighlight(5, @h)<cr>
vnoremap <leader>hA6 "hy:call MyStringHighlight(6, @h)<cr>
vnoremap <leader>hA7 "hy:call MyStringHighlight(7, @h)<cr>
vnoremap <leader>hA8 "hy:call MyStringHighlight(8, @h)<cr>
vnoremap <leader>hA9 "hy:call MyStringHighlight(9, @h)<cr>
vnoremap <leader>hAB1 "hy:call MyStringHighlight(11, @h)<cr>
vnoremap <leader>hAB2 "hy:call MyStringHighlight(12, @h)<cr>
vnoremap <leader>hAB3 "hy:call MyStringHighlight(13, @h)<cr>
vnoremap <leader>hAB4 "hy:call MyStringHighlight(14, @h)<cr>
vnoremap <leader>hAB5 "hy:call MyStringHighlight(15, @h)<cr>
vnoremap <leader>hAB6 "hy:call MyStringHighlight(16, @h)<cr>
vnoremap <leader>hAB7 "hy:call MyStringHighlight(17, @h)<cr>
vnoremap <leader>hAB8 "hy:call MyStringHighlight(18, @h)<cr>
vnoremap <leader>hAB9 "hy:call MyStringHighlight(19, @h)<cr>
vnoremap <leader>hAB0 "hy:call MyStringHighlight(10, @h)<cr>

nnoremap <leader>h<Backspace> :call FixColorscheme()<cr>

nnoremap <leader>q :q<CR>
inoremap <leader>q <C-O>:q<CR>
vnoremap <leader>q <C-O>:q<CR>
vnoremap <leader>y "+y<CR>

" }}}

" Extended base {{{

" Colors {{{

let g:terminal_ansi_colors = [
	\ "#000000",
	\ "#b80b11",
	\ "#64a55c",
	\ "#FEA649",
	\ "#506ce3",
	\ "#9e404e",
	\ "#007566",
	\ "#e0e0e0",
	\
	\ "#535669",
	\ "#F2592E",
	\ "#67b559",
	\ "#fafa60",
	\ "#5559dd",
	\ "#a83248",
	\ "#32e3d1",
	\ "#ffffff"
\]

function! ColorsInsertMode()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=10
	hi! CursorLineNr ctermbg=22 ctermfg=white cterm=none
	hi! StatusLine ctermbg=darkgreen ctermfg=229 cterm=bold
endfunction
function! ColorsOtherModes()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=167
	hi! CursorLineNr ctermbg=13 ctermfg=white cterm=none
	hi! StatusLine ctermbg=202 ctermfg=229 cterm=bold
endfunction
autocmd InsertEnter * call ColorsInsertMode()
autocmd InsertLeave * call ColorsOtherModes()

if !exists('Act')
	let g:Act = 0
endif
function! MyCursorHold()
	if g:Act == 1
		silent! exe "ptag " . expand("<cword>")
	endif
	if g:Act == 2
		silent! cal MyWordHighlight(0, expand("<cword>"))
	endif
	if g:Act == 3
		silent! cal MyStringHighlight(0, getline("."))
	endif
endfunction

function! FixColorscheme()
	call clearmatches()
	hi! Normal ctermbg=none
	hi! Error cterm=underline ctermfg=red ctermbg=235
	hi! Cursor guibg=lime
	hi! SignColumn guibg=#333333
	hi! Search ctermbg=darkblue ctermfg=white
	hi! IncSearch ctermbg=darkcyan ctermfg=white
	hi! FoldColumn ctermbg=236 ctermfg=229
	hi! Folded cterm=bold ctermbg=235 ctermfg=167
	hi! FoldColumn ctermbg=232 ctermfg=240 cterm=bold
	hi! DiffDelete ctermfg=239 ctermbg=234
	hi! diffRemoved ctermfg=red ctermbg=52
	hi! DiffAdd cterm=bold ctermfg=193 ctermbg=23
	hi! diffAdded cterm=none ctermfg=green
	hi! DiffChange ctermbg=233
	hi! DiffText cterm=bold ctermfg=225 ctermbg=96
	hi! CursorLine cterm=none ctermbg=none
	hi! CursorLineNr cterm=none ctermbg=13 ctermfg=white
	call ColorsOtherModes()
	hi! Comment cterm=italic ctermfg=242
	hi! ModeMsg ctermfg=Black ctermbg=Green
	hi! EndOfBuffer ctermbg=235 cterm=bold ctermfg=black
	hi! TabLine ctermbg=235 ctermfg=3 cterm=bold
	hi! TabLineSel ctermbg=5 ctermfg=3 cterm=bold
	hi! TabLineFill ctermfg=235 ctermbg=235
	hi! String ctermfg=2 ctermbg=235
	hi! cFormat ctermfg=36 ctermbg=237
	hi! SpecialChar ctermfg=142 ctermbg=236
	hi! PreProc ctermfg=15 cterm=bold
	hi! cDefine ctermfg=195 cterm=none
	hi! Type ctermfg=104
	hi! StorageClass ctermfg=96
	hi! Operator ctermfg=222
	hi! Function cterm=bold ctermfg=white
	hi! Number ctermfg=gray
	hi! Boolean ctermfg=gray
	hi! Repeat ctermfg=202 cterm=bold
	hi! Statement ctermfg=202 cterm=bold
	hi! Conditional ctermfg=202 cterm=bold
	hi! Constant ctermfg=gray
	hi! Identifier ctermfg=225 cterm=none
	hi! javaScopeDecl ctermfg=135
	hi! VertSplit ctermbg=240
	hi! StatusLine ctermbg=202 ctermfg=229 cterm=bold
	hi! StatusLineNC cterm=none ctermbg=240 ctermfg=229
	hi! StatusLineTerm ctermbg=202 ctermfg=121 cterm=bold
	hi! StatusLineTermNC cterm=none ctermbg=240 ctermfg=121
	hi! SpecialKey ctermfg=238 cterm=none
	hi! Special ctermfg=white cterm=bold
	hi! helpHyperTextJump ctermfg=blue
	syn match Whitespace /\s/
	" Show trailing whitespace:
	syn match ExtraWhitespace /\s\+$/
	" Show tabs that are not at the start of a line:
	syn match ExtraWhitespace /[^\t]\zs\t\+/
	hi! Whitespace cterm=none ctermfg=238
	hi! ExtraWhitespace cterm=none ctermfg=magenta ctermbg=236
	hi! MatchParen ctermbg=magenta ctermfg=yellow
	hi! Visual ctermbg=none ctermfg=none cterm=reverse,italic
	hi! luaFunc ctermbg=none ctermfg=white cterm=bold
	hi! luaFunction ctermbg=none ctermfg=24
	hi! Directory ctermbg=237 ctermfg=white
	hi! straceSysCall ctermfg=229
	hi! straceParenthesis ctermfg=blue ctermbg=235
	hi! straceNumberRHS ctermfg=214 ctermbg=52
	hi! Hi1 ctermbg=208 ctermfg=black
	hi! Hi2 ctermbg=179 ctermfg=black
	hi! Hi3 ctermbg=228 ctermfg=black
	hi! Hi4 ctermbg=104 ctermfg=black
	hi! Hi5 ctermbg=110 ctermfg=black
	hi! Hi6 ctermbg=153 ctermfg=black
	hi! Hi7 ctermbg=155 ctermfg=black
	hi! Hi8 ctermbg=46 ctermfg=black
	hi! Hi9 ctermbg=34 ctermfg=black
	hi! Hi0 ctermbg=236
	hi! Hi11 ctermfg=208
	hi! Hi12 ctermfg=179
	hi! Hi13 ctermfg=228
	hi! Hi14 ctermfg=104
	hi! Hi15 ctermfg=110
	hi! Hi16 ctermfg=153
	hi! Hi17 ctermfg=155
	hi! Hi18 ctermfg=46
	hi! Hi19 ctermfg=34
	hi! Hi10 ctermfg=238
	hi! Hi20 ctermbg=238
	hi! Hi21 ctermbg=238
	hi! Hi22 ctermbg=238
	hi! Hi23 ctermbg=238
	hi! Hi24 ctermbg=238
	hi! Hi25 ctermbg=238
	hi! MarkA ctermbg=52 ctermfg=white
	hi! MarkB ctermbg=19 ctermfg=white
	hi! MarkM ctermbg=22 ctermfg=white
	hi! MarkC ctermbg=58 ctermfg=white
	hi! MarkQuote ctermbg=238 ctermfg=white
	call matchadd("EndOfBuffer", "^[[:space:]]*$", 0)
	call matchadd('MarkQuote', "\\%''", 20)
	call matchadd('MarkA', "\\%'a", 20)
	call matchadd('MarkB', "\\%'b", 20)
	call matchadd('MarkC', "\\%'c", 20)
	call matchadd('MarkM', "\\%'m", 20)
	call matchadd('MarkA', "\\%'A", 20)
	call matchadd('MarkB', "\\%'B", 20)
	call matchadd('MarkC', "\\%'C", 20)
	call matchadd('MarkM', "\\%'M", 20)
	call matchadd('MarkA', '^\(<<<<<<<\||||||||\)', 0)
	call matchadd('MarkB', '^\(=======\|>>>>>>>\)', 0)
	hi! NERDTreeCWD ctermfg=179 cterm=bold
	hi! NERDTreeBookmark ctermfg=245 cterm=italic
	hi! NERDTreeBookmarkName ctermfg=green
	hi! NERDTreeBookmarksHeader ctermfg=none
endfunction

augroup MyColors
	au!
	au! ColorScheme * call FixColorscheme()
	au! BufWinEnter * call FixColorscheme()
	au! CursorMoved * silent! call MyCursorHold()
augroup END

call FixColorscheme()
" }}}

iabbrev heigth height

" Language-specific abbreviations and other settings {{{
function! LuaSpecificConfig()
	iabbrev <buffer> fn] function()end<Left><Left><Left><Left>
	iabbrev <buffer> ew] io.stderr:write("\n")<Left><Left><Left><Left><Left>
	iabbrev <buffer> pr] print()<Left>
endfunction

autocmd FileType lua call LuaSpecificConfig()

function! CSpecificConfig()
	iabbrev <buffer> i] #include
	iabbrev <buffer> I] #include
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	iabbrev <buffer> p] printf();<ESC>hi
	iabbrev <buffer> fp] fprintf(stderr, );<ESC>hi
	syn match cOperator1 "[&.;]"
	syn match cOperator2 "\([-+*/&|%!=<>]=\|[-+><?:!%^~|]\|[&] \|&&\)"
	syn match cOperator3 "[()]"
	syn match cOperatorBracket "[{}]"
	syn match Type '\<[a-zA-Z_]_t\>'
	hi! cOperator1 ctermfg=magenta
	hi! cOperator2 ctermfg=219
	hi! cOperator3 ctermfg=241
	hi! cOperatorBracket ctermfg=white cterm=bold
	syn match Endif /^#\s*endif\>/
	hi! Endif ctermbg=darkred
	syn match StartIf /^#\s*if\(n\?def\)\?\>/
	hi! StartIf ctermbg=darkblue
	syn match dFunction "\zs\(\k\w*\)*\s*\ze("
	hi link dFunction Function
endfunction

autocmd FileType c call CSpecificConfig()
autocmd FileType cpp call CSpecificConfig()

function! JavaSpecificConfig()
	iabbrev <buffer> psvm] public static void main(String[] args)
	iabbrev <buffer> im] import java.
	iabbrev <buffer> iu] import java.util.*;
	iabbrev <buffer> ii] import java.io.*;
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	iabbrev <buffer> pc] public class 
	iabbrev <buffer> pfc] public final class 
	iabbrev <buffer> prf] private final 
	iabbrev <buffer> psfi] public static final int
	iabbrev <buffer> psfs] public static final String 
	iabbrev <buffer> psf] public static final 
	iabbrev <buffer> ov] @Override
	iabbrev <buffer> eq] @Override<CR>public boolean equals(Object o) {<CR>return (o instanceof
	iabbrev <buffer> ha] @Override<CR>public int hashCode() {<CR>
	iabbrev <buffer> sout] System.out.println();<ESC>hi
	iabbrev <buffer> serr] System.err.println();<ESC>hi
	iabbrev <buffer> ssout] System.out.println("");<ESC>hhi
	iabbrev <buffer> sserr] System.err.println("");<ESC>hhi
endfunction

autocmd FileType java call JavaSpecificConfig()

function! NasmSpecificConfig()
	syntax match nasmRegisterDi "\v<([re]?di|dil)>"
	syntax match nasmRegisterSi "\v<([re]?si|sil)>"
	syntax match nasmRegisterDx "\v<([re]?dx|d[hl])>"
	syntax match nasmRegisterCx "\v<([re]?cx|c[hl])>"
	syntax match nasmRegisterR_8_10 "\v<r(8|10)>"
	syntax match nasmRegisterR_9_11 "\v<r(9|11)>"
	syntax match nasmRegisterR_12_14 "\v<r1[24]>"
	syntax match nasmRegisterR_13_15 "\v<r1[35]>"
	syntax match nasmRegisterA  "\v<([re]?ax|a[hl])>"
	syntax match nasmRegisterB  "\v<([re]?bx|b[hl])>"
	syntax match nasmRegisterSp "\v<([re]?sp|spl)>"
	syntax match nasmRegisterBp "\v<([re]?bp|bpl)>"
	syntax match nasmRegisterXmm_0_4_8_12  "\v<[xyz]mm([048]|12)>"
	syntax match nasmRegisterXmm_1_5_9_13  "\v<[xyz]mm([159]|12)>"
	syntax match nasmRegisterXmm_2_6_10_14 "\v<[xyz]mm([26]|1[04])>"
	syntax match nasmRegisterXmm_3_7_11_15 "\v<[xyz]mm([37]|1[15])>"
	syntax match nasmNonLocalInst "\v(<(sys)?call|j(mp|[ab]e?|c(xz)?|[re]cxz|[eopszab]|[gl]e?|n[abgl]e?|n[neglopsz]|p[eo])>)"
	" TODO find out why this is necessary
	call matchadd('nasmNonLocalInst', '\v\C(<(sys)?call|j(mp|[ab]e?|c(xz)?|[re]cxz|[eopszab]|[gl]e?|n[abgl]e?|n[neglopsz]|p[eo])>)')
	syntax match nasmBinNumber "\v<0b[01_]+>"
	syntax match nasmBinZero "\v(<0b[01_]*)@<=0" containedin=nasmBinNumber
	syntax match nasmBinOne "\v(<0b[01_]*)@<=1" containedin=nasmBinNumber
	syntax match nasmBinUnderscore "\v(<0b[01_]*)@<=_" containedin=nasmBinNumber
	syntax match nasmMyLabel "\v^[[:space:]]*[[:alnum:]_]+:"
	syntax match nasmMyLocalLabel "\v^[[:space:]]*\.[[:alnum:]_]+:"
	syntax match nasmBracket "[][]"
	syntax match nasmRel "\v(\[)@<=rel>"
	hi nasmRegisterDi cterm=bold ctermfg=lightcyan ctermbg=17
	hi nasmRegisterSi cterm=bold ctermfg=121 ctermbg=23
	hi nasmRegisterDx cterm=bold ctermfg=156 ctermbg=22
	hi nasmRegisterCx cterm=bold ctermfg=229 ctermbg=100
	hi nasmRegisterR_8_10  cterm=bold ctermfg=186 ctermbg=166
	hi nasmRegisterR_9_11  cterm=bold ctermfg=229 ctermbg=172
	hi nasmRegisterR_12_14 cterm=bold ctermfg=186 ctermbg=236
	hi nasmRegisterR_13_15 cterm=bold ctermfg=100 ctermbg=235
	hi nasmRegisterA  cterm=bold ctermfg=black ctermbg=22
	hi nasmRegisterB  cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterSp cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterBp cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterXmm_0_4_8_12  cterm=bold ctermfg=203
	hi nasmRegisterXmm_1_5_9_13  cterm=bold ctermfg=211
	hi nasmRegisterXmm_2_6_10_14 cterm=bold ctermfg=134
	hi nasmRegisterXmm_3_7_11_15 cterm=bold ctermfg=97
	hi nasmNonLocalInst cterm=bold ctermfg=darkred
	hi nasmBinZero cterm=bold ctermbg=234 ctermfg=gray
	hi nasmBinOne cterm=bold ctermbg=236 ctermfg=72
	hi nasmBinUnderscore ctermfg=236
	hi nasmBinNumber cterm=italic ctermfg=8
	hi nasmMyLabel ctermbg=white ctermfg=black cterm=bold
	hi nasmMyLocalLabel ctermbg=white ctermfg=black
	hi nasmBracket ctermfg=darkred 
	hi nasmRel ctermfg=gray 
endfunction

autocmd FileType nasm call NasmSpecificConfig()
autocmd BufRead,BufNewFile *.nasm set ft=nasm | call NasmSpecificConfig()

function! ShellSpecificConfig()
	iabbrev if] if [  ]; then<ESC>7hi
	iabbrev ifv] if [ "$" ]; then<ESC>8hi
	hi! Identifier ctermfg=225 cterm=none
	nnoremap <buffer> <leader>shd <C-w>v"gyiw:silent lgrep '<C-r>g='<cr>:redraw!<cr>:lwindow<cr>
	syntax match InlineVimCommand "^:.*$"
	"hi! InlineVimCommand
endfunction

autocmd FileType sh call ShellSpecificConfig()

function! QuickfixSpecificConfig()
	setlocal nornu
	nnoremap <buffer> <leader>dl :call MyLocDelete()<cr>
	nnoremap <buffer> <leader>dq :call MyQuickfixDelete()<cr>
endfunction

autocmd FileType qf call QuickfixSpecificConfig()
" }}}

" Commands {{{
command! Hidecomments hi! Comment ctermfg=236
command! Showcomments hi! Comment ctermfg=8
if has('win32')
	command! Mydiff execute 'w !diff -u % -'
else
	command! Mydiff execute 'w !diff -u --color % -'
endif
command! Edir e %:p:h
command! Tedir tabedit %:p:h
command! Fi tabnew | execute('0r!ag -lU') | set buftype=nofile
function! MyFileGrep()
	silent! call MyHighlight(10, '.*/')
	silent! call MyHighlight(0, '/')
	silent! call MyHighlight(17, '[^/]*\.c$')
	silent! call MyHighlight(15, '[^/]*\.h$')
	if line('$') == 2
		norm gf
	endif
endfunction
command! -nargs=* Fig enew | execute('0r!ag -lUG <f-args> | sort') | set buftype=nofile | call MyFileGrep()
command! Nw set nowrap
command! Re execute('resize ' . line('$'))
command! -nargs=+ AgX :tabnew | execute('0r!ag <f-args>')|set buftype=nofile
command! -nargs=* Gd :tabnew | set ft=diff |  execute('0r!git diff <f-args>') | set buftype=nofile
command! -nargs=* Gb :let MyBlameFile=@% | let MyBlameLine=line('.')+1 | tabnew | execute('r!git blame '.MyBlameFile) | execute(':'.MyBlameLine)|set buftype=nofile|normal zz
command! -nargs=+ Lg :silent! lgrep <f-args> | redraw! | lw
command! -nargs=+ Gr :silent! grep <f-args>  | redraw! | botright cw
command! Gadd !git -C %:p:h add %:t
function! MyTemporaryGitLogBuffer()
	set ft=diff
	set buftype=nofile
	let @z='\v^    ($|[^ ])'
	normal \znZ
	keepj normal gg
	call MyHighlight(1, '^commit ')
endfunction
command! -nargs=* Glogf let MyGitLogFile=@% | tabnew |  execute('0r!git atfile '.MyGitLogFile.' log -p --follow '.MyGitLogFile) | call MyTemporaryGitLogBuffer()
command! -nargs=* -range Glogr let MyGitLogFile=@% | tabnew | execute('0r!git atfile '.MyGitLogFile.' log -L '.<line1>.','.<line2>.':'.MyGitLogFile) | call MyTemporaryGitLogBuffer()
command! -nargs=* Gplaces enew | execute('0r!git recursive diffplaces '.<q-args>) | set ft=diff | set buftype=nofile
command! -nargs=* Cmd vert sp | enew | set buftype=nofile | execute('0r!<args>')
command! HiSystemd call HiSystemd()
command! Sp2 set tabstop=2 expandtab shiftwidth=2
command! Sp3 set tabstop=3 expandtab shiftwidth=3
command! Sp4 set tabstop=4 expandtab shiftwidth=4
command! Tb set tabstop=4 noexpandtab shiftwidth=4
command! Foldmerge set fdm=marker foldmarker=<<<<<<<,>>>>>>>
function! Notes()
	let l:notefile = findfile('.notes', '.;')
	if len(l:notefile) > 0
		execute('view '.l:notefile)
	endif
endfunction
command! Notes call Notes()
"command! -nargs=1 Tg enew|set ft=help|pu=map(taglist('<args>'), {pos,val -> printf('\|%s\| %s', val['name'], substitute(val['filename'], '.*/wave-next/', '', ''))})
function! CleanBuffers()
	let buflist = []
	for i in range(tabpagenr('$'))
		call extend(buflist, tabpagebuflist(i+1))
	endfor
	for bnr in range(1, bufnr('$'))
		if index(buflist, bnr) == -1 && buflisted(bnr)
			exe 'bd '.bnr
		endif
	endfor
endfunction
" }}}

" }}}

" {{{ Plugin options

let g:termdebug_wide=1

let g:undotree_WindowLayout = 3
let g:undotree_DiffCommand = "diff -u"
let g:undotree_HighlightSyntaxAdd = "DiffAdd"
let g:undotree_HighlightSyntaxChange = "DiffChange"
let g:undotree_HighlightSyntaxDel = "DiffDelete"

let g:syntastic_mode_map = {'mode': 'passive'}

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
let g:slime_bracketed_paste = 1

let g:TerminusCursorShape = 0

let g:netrw_altv=1
let g:netrw_bufsettings='number relativenumber'
let g:netrw_silent=1

let g:NERDTreeShowLineNumbers=1
let g:NERDTreeWinPos="left"
let g:NERDTreeWinSize=40
let g:NERDTreeShowBookmarks=1
function! MyNERDTreeCopyCurrentNode()
	let n = g:NERDTreeFileNode.GetSelected()
	if n != {}
		call setreg('0', n.path.str())
		call setreg('"', n.path.str())
		call system('tmux loadb -', n.path.str())
	endif
endfunction
function! MyNERDTreeSetup()
	if exists('*NERDTreeAddKeyMap')
		call NERDTreeAddKeyMap({
			\ 'key': 'yy',
			\ 'callback':  'MyNERDTreeCopyCurrentNode',
			\ 'quickhelpText': '(custom) put full path of file in tmux clipboard and the "0" register'})
	endif
endfunction
au VimEnter * call MyNERDTreeSetup()

let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'lightred', 'lightmagenta']

" }}}

" Plugin mappings {{{
noremap <leader>nt :NERDTreeToggle<cr>
inoremap <leader>nt <C-O>:NERDTreeToggle<cr>
noremap <leader>nf :NERDTreeFind<cr>
nnoremap <leader>nb :NERDTreeFind<cr>:Bookmark<cr>

map <Leader><C-k> <Plug>(easymotion-bd-jk)
map <Leader><C-w> <Plug>(easymotion-overwin-w)
nmap s <Plug>(easymotion-bd-f)
nmap <Space> <Plug>(easymotion-bd-w)

if has("gui_running")
	map <M-s> <Plug>(easymotion-overwin-f)
endif

nnoremap <leader>lb :Buffers<CR>
nnoremap <leader>lw :Windows<CR>
nnoremap <leader>lf :Files<CR>
nnoremap <leader>lc :Commands<CR>

if exists(':SlimeSend')
	nnoremap <leader><Space> :SlimeSend<CR>
	inoremap <leader><Space> <C-O>:SlimeSend<CR>
	vnoremap <leader><Space> :SlimeSend<CR>
endif

" }}}

" System-specific {{{
" see :help xterm-bracketed-paste
if &t_BE == ''
	let &t_BE = "\e[?2004h"
	let &t_BD = "\e[?2004l"
	let &t_PS = "\e[200~"
	let &t_PE = "\e[201~"
endif

if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
if isdirectory('/local/fromans/.vim')
	let &g:directory="/local/fromans/.vim"
endif
let &viminfofile=&g:directory . '/viminfo'
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
if filereadable($HOME.'/.vimrc.local')
	exe "so ".$HOME.'/.vimrc.local'
endif
" }}}

