set nocompatible
set incsearch
set nomodeline
syntax on
colorscheme desert

function! ColorsInsertMode()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=10
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=10
	hi! CursorLineNr ctermbg=green ctermfg=white cterm=none
	hi! StatusLine ctermbg=darkgreen ctermfg=229 cterm=bold
endfunction
function! ColorsOtherModes()
	hi! LineNr cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrAbove cterm=bold ctermbg=235 ctermfg=167
	hi! LineNrBelow cterm=bold ctermbg=233 ctermfg=167
	hi! CursorLineNr ctermbg=13 ctermfg=white cterm=none
	hi! StatusLine ctermbg=darkmagenta ctermfg=229 cterm=bold
endfunction
autocmd InsertEnter * call ColorsInsertMode()
autocmd InsertLeave * call ColorsOtherModes()

function! FixColorscheme() "{{{
	hi! Normal ctermbg=none guibg=black
	hi! Search ctermfg=white ctermbg=24
	hi! IncSearch ctermfg=white ctermbg=36
	hi! Folded cterm=bold ctermbg=235 ctermfg=167
	hi! FoldColumn ctermbg=232 ctermfg=240 cterm=bold
	hi! DiffDelete ctermfg=52 ctermbg=52
	hi! diffRemoved ctermfg=52 ctermbg=52
	hi! DiffAdd cterm=bold ctermfg=193 ctermbg=23
	hi! diffAdded cterm=bold ctermfg=193 ctermbg=23
	hi! DiffChange ctermfg=none ctermbg=234
	hi! DiffText cterm=bold ctermfg=229 ctermbg=101
	hi! CursorLine cterm=none ctermbg=none
	hi! CursorLineNr cterm=none ctermbg=13 ctermfg=white
	hi! Comment cterm=italic ctermfg=8
	hi! ModeMsg ctermfg=Black ctermbg=Green
	hi! VertSplit ctermfg=179
	hi! EndOfBuffer ctermbg=235
	hi! TabLine ctermbg=235 ctermfg=229 cterm=bold
	hi! TabLineSel ctermbg=darkmagenta ctermfg=229 cterm=bold
	hi! TabLineFill ctermbg=none
	hi! String ctermfg=2 ctermbg=235
	hi! cFormat ctermfg=36 ctermbg=237
	hi! SpecialChar ctermfg=142 ctermbg=236
	hi! PreProc ctermfg=15 cterm=bold
	hi! cDefine ctermfg=15 cterm=none
	hi! Type ctermfg=95 cterm=none gui=none
	hi! StorageClass ctermfg=101
	hi! Operator ctermfg=yellow
	hi! Number ctermfg=gray
	hi! Constant ctermfg=gray
	hi! Boolean ctermfg=gray
	hi! Repeat ctermfg=202 cterm=bold gui=none
	" hi! Statement ctermfg=202 cterm=bold gui=none
	hi! Conditional ctermfg=202 cterm=bold gui=none
	hi! javaScopeDecl ctermfg=135
	hi! StatusLineNC ctermbg=235 ctermfg=229 cterm=bold
	hi! StatusLineTerm ctermbg=darkmagenta ctermfg=225 cterm=bold
	hi! StatusLineTermNC ctermbg=235 ctermfg=225 cterm=bold
	hi! SpecialKey ctermfg=236 cterm=bold,italic
	hi! ExtraWhitespace ctermbg=17
	hi! MatchParen ctermbg=magenta ctermfg=yellow
	hi! Visual ctermbg=none ctermfg=none cterm=reverse,italic
	hi! luaFunc ctermbg=none ctermfg=white cterm=bold gui=none
	hi! luaFunction ctermbg=none ctermfg=24
	hi! Identifier ctermfg=white
	hi! Statement ctermfg=white cterm=none
	syntax match ifdef_begin "\v#(if(n?def)?|macro)>"
	syntax match ifdef_end "\v#end(if|macro)>"
	syntax match ifdef_else "\v#el(se|if(def)?)>"
	hi! ifdef_begin ctermfg=white ctermbg=17
	hi! ifdef_end ctermfg=white ctermbg=52
	hi! ifdef_else ctermfg=black ctermbg=darkyellow
	call ColorsOtherModes()
endfunction
"}}}

augroup MyColors
	au!
	au ColorScheme * call FixColorscheme()
augroup END

call FixColorscheme()

" Show trailing whitespace:
match ExtraWhitespace /\s\+$/

" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/

" Show tabs that are not at the start of a line:
match ExtraWhitespace /[^\t]\zs\t\+/

au BufRead * call matchadd("EndOfBuffer", "^[[:space:]]*$")

iabbrev heigth height

" {{{
function! LuaAbbreviations()
	iabbrev <buffer> fn] function()end<Left><Left><Left><Left>
	iabbrev <buffer> ew] io.stderr:write("\n")<Left><Left><Left><Left><Left>
	iabbrev <buffer> pr] print()<Left>
	set foldmarker=--[[,]]
endfunction

autocmd FileType lua call LuaAbbreviations()

function! CAbbreviations()
	iabbrev <buffer> i] #include
	iabbrev <buffer> I] #include
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	set foldmarker=/*,*/
endfunction

autocmd FileType c call CAbbreviations()

function! JavaAbbreviations()
	iabbrev <buffer> psvm] public static void main(String[] args)
	iabbrev <buffer> im] import java.
	iabbrev <buffer> iu] import java.util.*;
	iabbrev <buffer> ii] import java.io.*;
	iabbrev <buffer> fi] for(int i = 0; i < z; i++)<ESC>?z<CR>cl
	iabbrev <buffer> fj] for(int j = 0; j < z; j++)<ESC>?z<CR>cl
	iabbrev <buffer> pc] public class 
	iabbrev <buffer> pfc] public final class 
	iabbrev <buffer> prf] private final 
	iabbrev <buffer> psfi] public static final int
	iabbrev <buffer> psfs] public static final String 
	iabbrev <buffer> psf] public static final 
	iabbrev <buffer> ov] @Override
	iabbrev <buffer> eq] @Override<CR>public boolean equals(Object o) {<CR>return (o instanceof
	iabbrev <buffer> ha] @Override<CR>public int hashCode() {<CR>
	set foldmarker=/**,*/
endfunction

autocmd FileType java call JavaAbbreviations()

function! NasmAbbreviations()
	syntax match nasmRegisterDi "\v<([re]?di|dil)>"
	syntax match nasmRegisterSi "\v<([re]?si|sil)>"
	syntax match nasmRegisterDx "\v<([re]?dx|d[hl])>"
	syntax match nasmRegisterCx "\v<([re]?cx|c[hl])>"
	syntax match nasmRegisterR_8_10 "\v<r(8|10)>"
	syntax match nasmRegisterR_9_11 "\v<r(9|11)>"
	syntax match nasmRegisterR_12_14 "\v<r1[24]>"
	syntax match nasmRegisterR_13_15 "\v<r1[35]>"
	syntax match nasmRegisterA  "\v<([re]?ax|a[hl])>"
	syntax match nasmRegisterB  "\v<([re]?bx|b[hl])>"
	syntax match nasmRegisterSp "\v<([re]?sp|spl)>"
	syntax match nasmRegisterBp "\v<([re]?bp|bpl)>"
	syntax match nasmRegisterXmm_0_4_8_12  "\v<[xyz]mm([048]|12)>"
	syntax match nasmRegisterXmm_1_5_9_13  "\v<[xyz]mm([159]|12)>"
	syntax match nasmRegisterXmm_2_6_10_14 "\v<[xyz]mm([26]|1[04])>"
	syntax match nasmRegisterXmm_3_7_11_15 "\v<[xyz]mm([37]|1[15])>"
	syntax match nasmNonLocalInst "\v(<(sys)?call|j(mp|[ab]e?|c(xz)?|[re]cxz|[eopszab]|[gl]e?|n[abgl]e?|n[neglopsz]|p[eo])>)"
	" TODO find out why this is necessary
	call matchadd('nasmNonLocalInst', '\v\C(<(sys)?call|j(mp|[ab]e?|c(xz)?|[re]cxz|[eopszab]|[gl]e?|n[abgl]e?|n[neglopsz]|p[eo])>)')
	syntax match nasmBinNumber "\v<0b[01_]+>"
	syntax match nasmBinZero "\v(<0b[01_]*)@<=0" containedin=nasmBinNumber
	syntax match nasmBinOne "\v(<0b[01_]*)@<=1" containedin=nasmBinNumber
	syntax match nasmBinUnderscore "\v(<0b[01_]*)@<=_" containedin=nasmBinNumber
	syntax match nasmMyLabel "\v^[[:space:]]*[[:alnum:]_]+:"
	syntax match nasmMyLocalLabel "\v^[[:space:]]*\.[[:alnum:]_]+:"
	syntax match nasmBracket "[][]"
	syntax match nasmRel "\v(\[)@<=rel>"
	hi nasmRegisterDi cterm=bold ctermfg=lightcyan ctermbg=17
	hi nasmRegisterSi cterm=bold ctermfg=121 ctermbg=23
	hi nasmRegisterDx cterm=bold ctermfg=156 ctermbg=22
	hi nasmRegisterCx cterm=bold ctermfg=229 ctermbg=100
	hi nasmRegisterR_8_10  cterm=bold ctermfg=186 ctermbg=166
	hi nasmRegisterR_9_11  cterm=bold ctermfg=229 ctermbg=172
	hi nasmRegisterR_12_14 cterm=bold ctermfg=186 ctermbg=236
	hi nasmRegisterR_13_15 cterm=bold ctermfg=100 ctermbg=235
	hi nasmRegisterA  cterm=bold ctermfg=black ctermbg=22
	hi nasmRegisterB  cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterSp cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterBp cterm=bold,italic ctermfg=darkcyan ctermbg=233
	hi nasmRegisterXmm_0_4_8_12  cterm=bold ctermfg=203
	hi nasmRegisterXmm_1_5_9_13  cterm=bold ctermfg=211
	hi nasmRegisterXmm_2_6_10_14 cterm=bold ctermfg=134
	hi nasmRegisterXmm_3_7_11_15 cterm=bold ctermfg=97
	hi nasmNonLocalInst cterm=bold ctermfg=darkred
	hi nasmBinZero cterm=bold ctermbg=234 ctermfg=gray
	hi nasmBinOne cterm=bold ctermbg=236 ctermfg=72
	hi nasmBinUnderscore ctermfg=236
	hi nasmBinNumber cterm=italic ctermfg=8
	hi nasmMyLabel ctermbg=white ctermfg=black cterm=bold
	hi nasmMyLocalLabel ctermbg=white ctermfg=black
	hi nasmBracket ctermfg=darkred 
	hi nasmRel ctermfg=gray 
endfunction

autocmd FileType nasm call NasmAbbreviations()
autocmd BufRead,BufNewFile *.nasm set ft=nasm | call NasmAbbreviations()

" }}}

set laststatus=2
set fillchars+=vert:\ 
set suffixesadd=.rst,.java
set list
set listchars=tab:▸\ ,trail:⌀
set tabstop=3
set noexpandtab
set autoindent
set shiftwidth=3
set scrolloff=3
set splitbelow
set splitright

set guioptions-=m
set guioptions-=T
set guifont=Droid\ Sans\ Mono:h11,Cascadia\ Code:h11,Consolas:h13,Droid\ Sans\ Mono
set renderoptions=type:directx,level:0.75,gamma:1.25,contrast:0.25,geom:1,renmode:5,taamode:1
set linespace=-1

set foldmethod=manual
set mouse=a
set belloff=all
set switchbuf=newtab

set background=dark
set hlsearch
set ttyfast

set number
set relativenumber

set undofile
set updatetime=60000

set cul

command! Hidecomments hi! Comment ctermfg=236
command! Showcomments hi! Comment ctermfg=8
command! Mydiff execute 'w !diff -u % - | (command -v delta && delta --paging never || cat)'
command! Nw set nowrap

set whichwrap+=<,>,[,]
set timeout timeoutlen=10000 ttimeoutlen=20

" {{{ plugin options

let g:termdebug_wide=1

let g:undotree_WindowLayout = 3
let g:undotree_DiffCommand = "diff -u"
let g:undotree_HighlightSyntaxAdd = "DiffAdd"
let g:undotree_HighlightSyntaxChange = "DiffChange"
let g:undotree_HighlightSyntaxDel = "DiffDelete"

let g:syntastic_mode_map = {'mode': 'passive'}

let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
let g:slime_bracketed_paste = 1

let g:TerminusCursorShape = 0

let g:netrw_altv=1

let g:NERDTreeShowLineNumbers=1
let g:NERDTreeWinPos="right"

let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'lightred', 'lightmagenta']

" }}}

set virtualedit+=onemore
set tabpagemax=50

let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat

function! SaveAndMake()
	:w
	:silent make
endfunction

let mapleader = "\<C-k>"
nmap \ <leader>
vmap \ <leader>

vnoremap <leader>gn "py:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>gn :LogiPat !"<C-R>p"<cr>:noh<cr>
vnoremap <leader>z1n "pyzf:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>z1n zf:LogiPat !"<C-R>p"<cr>:noh<cr>
nnoremap <leader>zN :set fdm=expr<cr>:set foldexpr=getline(v:lnum)!~@z<cr>:set fdm=manual<cr>
nnoremap <leader>zM :set fdm=expr<cr>:set foldexpr=getline(v:lnum)=~@z<cr>:set fdm=manual<cr>
vmap <leader>zn "zy<C-k>zN
vmap <leader>zm "zy<C-k>zM
nmap <leader>zn "zyiw<C-k>zN
nmap <leader>zm "zyiw<C-k>zM

nnoremap <leader>zs :set fdm=syntax<cr>:set fdm=manual<cr>
nnoremap <leader>ty "tyiw:call system('tmux loadb -', getreg('@t'))<cr>
vnoremap <leader>ty y:call system('tmux loadb -', getreg('@t'))<cr>
nnoremap <leader>tp :call setreg('@t', 'tmux showb')<cr>"tP

nnoremap <C-@> <Esc>
inoremap <C-@> <Esc>
nnoremap <Space> i

noremap <C-F> <ESC>
noremap! <C-F> <ESC>
inoremap <C-F> <ESC>l
inoremap <C-L> <ESC>l

noremap <S-F1> :1wincmd w<CR>
noremap <S-F2> :2wincmd w<CR>
noremap <S-F3> :3wincmd w<CR>
noremap <S-F4> :4wincmd w<CR>
noremap <S-F5> :5wincmd w<CR>
noremap <S-F6> :6wincmd w<CR>

inoremap <S-F1> <C-o>:1wincmd w<CR>
inoremap <S-F2> <C-o>:2wincmd w<CR>
inoremap <S-F3> <C-o>:3wincmd w<CR>
inoremap <S-F4> <C-o>:4wincmd w<CR>
inoremap <S-F5> <C-o>:5wincmd w<CR>
inoremap <S-F6> <C-o>:6wincmd w<CR>

inoremap <leader>; <C-O>:
noremap <leader>1 :!
inoremap <leader>1 <C-O>:!
noremap <leader>nt :NERDTreeToggle<cr>
inoremap <leader>nt <C-O>:NERDTreeToggle<cr>
noremap <leader>se :mksession!<cr>
inoremap <leader>se <C-O>:mksession!<cr>

inoremap <leader>mk <C-O>:call SaveAndMake()<cr>
nnoremap <leader>mk :call SaveAndMake()<cr>
noremap! <C-S> <ESC>:w<cr>
noremap! <C-Q> <ESC>l
nnoremap <C-S> :w<cr>
nnoremap <C-Q> :q<cr>

nnoremap ; :
nnoremap , ;
nnoremap gw <C-W>w

vnoremap <C-E> :!
nnoremap <C-E> :%!
inoremap <C-E> <C-O>:%!

inoremap <C-A> <C-O>S

map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
nmap s <Plug>(easymotion-overwin-f)

nnoremap <leader>w viw
nnoremap <leader>] <C-w><C-]><C-w>T
inoremap <leader>] <C-O><C-w><C-]><C-O><C-w>T
nnoremap <leader>tn :tnext<CR>
inoremap <leader>tn <C-O>:tnext<CR>

nnoremap <leader>lb :Buffers<CR>
nnoremap <leader>lw :Windows<CR>
nnoremap <leader>lf :Files<CR>
nnoremap <leader>lc :Commands<CR>
nnoremap <leader>q :q<CR>

inoremap <leader>lb <C-O>:Buffers<CR>
inoremap <leader>lw <C-O>:Windows<CR>
inoremap <leader>lf <C-O>:Files<CR>
inoremap <leader>lc <C-O>:Commands<CR>
inoremap <leader>q <C-O>:q<CR>

vnoremap <leader>lb <C-O>:Buffers<CR>
vnoremap <leader>lw <C-O>:Windows<CR>
vnoremap <leader>lf <C-O>:Files<CR>
vnoremap <leader>lc <C-O>:Commands<CR>
vnoremap <leader>q <C-O>:q<CR>
vnoremap <leader>y "+y<CR>

nnoremap <leader>s :SlimeSend<CR>
inoremap <leader>s <C-O>:SlimeSend<CR>
vnoremap <leader>s :SlimeSend<CR>

au FocusLost * silent! wa

au FocusLost   * set norelativenumber
au FocusGained * set relativenumber

set hidden

" see :help xterm-bracketed-paste
if &t_BE == ''
	let &t_BE = "\e[?2004h"
	let &t_BD = "\e[?2004l"
	let &t_PS = "\e[200~"
	let &t_PE = "\e[201~"
endif

packadd termdebug

" {{{ copied from Arch Linux vim config
if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
let &viminfofile=&g:directory . '/viminfo'
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
" }}}
